*usr_42.txt*	For Vim バージョン 6.3.  Last change: 2002 Oct 08

		     VIM USER MANUAL - by Bram Moolenaar

			   新しいメニューを追加する


これまでの説明でvimにはとても柔軟性があることはご存知と思います。これには
ＧＵＩでのプルダウンメニューも含みます。特定のコマンド群に簡単にアクセスでき
るように独自のプルダウンメニューを定義することができます。但しこれはマウス大
好きなユーザ専用です。

|42.1|	はじめに
|42.2|	メニューコマンド
|42.3|	その他いろいろ
|42.4|	ツールバーとポップアップメニュー

     Next chapter: |usr_43.txt|  ファイルタイプを使う
 Previous chapter: |usr_41.txt|  vimスクリプトの作り方
Table of contents: |usr_toc.txt|

==============================================================================
*42.1*	はじめに

vimが使っているメニューは"$VIMRUNTIME/menu.vim"ファイルで定義しています。独
自のメニューを作りたい場合は最初にそのファイルに目を通したくなることでしょう。
メニュー項目を定義 するには":menu"コマンドを使います。このコマンドの基本的な
形式はこの通りです。 >

	:menu {menu-item} {keys}

{menu-item}にはどのメニューにその項目を置くのかを示します。{menu-item}の典形
的な例は"File.Save"です。これは"File"メニューの中の"Save"項目であることを示
します。途中の"."は名前の区切りに使います。例を示しましょう。 >

	:menu File.Save  :update<CR>

":update"コマンドはファイルが変更されていればそれを保存するコマンドです。
レベルを１つ増やすこともできます。"Edit.Settings.Shiftwidth"であれば"Edit"
メニューの中に"Settings"というサブメニューを作ります。項目名は"Shiftwidth"
です。さらに増やすこともできます。ですが、使い過ぎると目的の項目を使うまでに
少しばかりたくさんマウスを動かさなければなりません。
":menu"コマンドは":map"コマンドにとてもよく似ています。パラメタの左側にはト
リガとなる項目をどのように指定するかを示し、右側は実行するコマンドの定義を行
います。{keys}は文字列で、実際にそれを手で入力したのと同じように扱います。
つまり、挿入モードでは{keys}が通常の文字列であれば、その文章がそのまま挿入さ
れるのです。


キーボードアクセラレータ
------------------------

アンパサンド文字(&)はアクセラレータの識別子です。例えば、Alt+Fで"File"メニュ
ーを選んで、S で"Save"を選択できます。(たとえ'winaltkeys'オプションをoffにし
ていても、です！）ですから、{menu-item}は"&File.&Save"のようになります。アク
セラレータ文字はメニュー中で下線付きで表示されます。
各メニューでそれぞれのキーが一度だけしか使われないようにしなければなりませ
ん。そうでないと２つのうちどちらが実際に実行されるかわからなくなります。これ
についてvimは何も警告を行いません。


優先順位
--------

実際の"File.Save"メニューの定義はこのようになっています。 >

	:menu 10.340 &File.&Save<Tab>:w  :confirm w<CR>

10.340という数値は優先順位番号といいます。これはエディタがメニュー項目を置く
場所を決めるのに使います。最初の数字(10)はメニューバー上の位置を示します。
数字が小さいほど左側に配置し、大きいほど右側に配置します。
標準メニューではこの値は次のとおりです。

	日本語環境
	  10	   20     40       50         60       70	     9999
	+-----------------------------------------------------------------+
	| ファイル 編集 ツール シンタックス バッファ ウィンドウ	   ヘルプ |
	+-----------------------------------------------------------------+

	英語環境
	  10	20     40     50      60       70		9999
	+------------------------------------------------------------+
	| File	Edit  Tools  Syntax  Buffers  Window		Help |
	+------------------------------------------------------------+

ヘルプメニューがとても大きな値になっていて、一番右端に表示されていることを覚
えておいてください。
２つ目の数字(340)はプルダウンメニューの中での項目の表示位置を示します。小さ
い数字ほど上の方に置かれ、大きい数字ほど下の方に置かれます。ファイルメニュー
での各項目の値は次のとおりです。

			    日本語環境		      英語環境
			+-------------------+    +-----------------+
	    10.310	|開く...	    |    |Open...	   |
	    10.320	|分割して開く...    |    |Split-Open...	   |
	    10.325	|新規作成	    |    |New		   |
	    10.330	|閉じる		    |    |Close		   |
	    10.335	|------------------ |    |---------------- |
	    10.340	|保存		    |    |Save		   |
	    10.350	|名前を付けて保存...|    |Save As...	   |
	    10.400	|------------------ |    |---------------- |
	    10.410	|差分表示...	    |    |Split Diff with  |
	    10.420	|パッチ結果を表示...|    |Split Patched By |
	    10.500	|------------------ |    |---------------- |
	    10.510	|印刷		    |    |Print		   |
	    10.600	|------------------ |    |---------------- |
	    10.610	|保存して終了	    |    |Save-Exit	   |
	    10.620	|終了		    |    |Exit		   |
			+-------------------+    +-----------------+

数値がいくつか飛びになっている点に気づきましたか。これは本当にやりたければ、
独自のメニュー項目を好みの場所に挿入できるようにするためです。(ですが、多く
の場合は標準メニューには手を加えるより、その項目用に独立したメニューを追加す
るのが良いでしょう）
サブメニューを作る時は優先順位番号に".数字"を追加します。つまり{menu-item}の
それぞれが、優先順位番号を持っているということです。


特殊文字
--------

この例では{menu-item}に"ファイル(&F).保存(&S)<Tab>:w"と指定しました。この、
「{menu-item}は１つの単語でなければならない」というのは重要なポイントです。
もし、"."や空白やTabを含みたい場合は、<>で囲む(<Space>とか<Tab>)か、バックス
ラッシュで無効化するかしなくてはなりません。 >

	:menu 10.305 &File.&Do\ It\.\.\. :exit<CR>

上の列ではメニュー項目に"Do It..."という空白を含んだ名前を使っていて、実行す
るコマンドは":exit<CR>"です。

メニューの名前に<Tab>文字を使っていると、メニュー項目名を定義する部分と利用
者へのヒント情報を区別できます。<Tab>の後にある部分はメニューで右寄せして表
示します。"ファイル.保存"メニューでは、名前は"ファイル(&F).保存(&S)<Tab>:w"
を使っています。つまり"ファイル.保存"は名前で、":w"がヒントということです。


セパレータ
----------

セパレータは関連した項目をグループに見せる時に使います。これは例えば"-sep-"
のように名前の最初と最後に"-"を付けることで定義できます。複数のセパレータを
使う場合、名前は違うものでなければなりません。ですが、名前それ自身には意味は
ありません。
セパレータに定義されたコマンドは永遠に実行されることはありませんが、何か定義
は必要ですので、":"でも使いましょう。例をあげます。 >

	:amenu 20.510 Edit.-sep3- :

==============================================================================
*42.2*	メニューコマンド

特定のモードに入った時にのみ存在するようなメニュー項目を定義できます。これは
":map"コマンドと全く同じバリエーションがあります。


	:menu		通常モード、ビジュアルモード、 オペレータ保留モード
	:nmenu		通常モード
	:vmenu		ビジュアルモード
	:omenu		オペレータ保留モード
	:menu!		挿入モード、コマンドライン
	:imenu		挿入モード
	:cmenu		コマンドライン
	:amenu		全モード

メニュー項目のコマンドがマップされるのを避けるには":noremenu"、":nnoremenu"
":anoremenu"などを使います。


:amenuの使い方
--------------

":amenu"コマンドを使う時はちょっと気をつけてください。ここで指定した{keys}は
通常モードで実行するものとみなされます。こういったメニューコマンドをビジュア
ルモードや挿入モードの時に行うには、まず通常モードに戻らなければなりません。
":amenu"はCTRL-CかCTRL-Oを挿入してくれます。例えば次のようなコマンドを使うこ
とを考えます。
>
	:amenu  90.100 Mine.Find\ Word  *

このコマンドを実行すると、こうなります。

	通常モード:		*
	ビジュアルモード:	CTRL-C *
	オペレータ保留モード:	CTRL-C *
	挿入モード:		CTRL-O *
	コマンド行モード:	CTRL-C *

コマンド行モードではCTRL-Cは入力されたコマンドを捨てます。ビジュアルモードと
オペレータ保留モードではそのモードから抜けます。挿入モードでのCTRL-Oは指定の
コマンドを実行した後、挿入モードに戻ります。
ただ、CTRL-Oは１つのコマンドしか指定できません。２つ以上のコマンドを指定する
必要がある場合は、それを関数化し、その関数を呼びます。例をあげましょう。 >

	:amenu  Mine.Next\ File  :call <SID>NextFile()<CR>
	:function <SID>NextFile()
	:  next
	:  1/^Code
	:endfunction

このメニューエントリは":next"でパラメタリスト中の次のファイルに移動し"Code"
で始まる行を検索します。
関数名の前にある<SID>はスクリプトＩＤです。これは関数をスクリプトローカルな
関数とするのに使います。他のスクリプトファイルに定義されている関数名との重複
があっても問題となりません。|<SID>|をご覧ください。


非表示メニュー
------------------

メニューは{keys}があたかも入力されたかのように実行しまっ。例えば、":"コマン
ドであれば、実際にコマンド行にそのコマンドが表示されるのが見えるということで
す。それが長いコマンドであれば、Enterキーの入力を促すこともありえます。 こん
なのはうっとおしい限りです。
これはメニューを非表示にすることで避けられます。<silent>パラメタを指定しま
す。例えば上で示したサンプルではNextFile()関数を呼び出しています。これを使う
と、コマンド行にこのような表示が出ます。

	:call <SNR>34_NextFile() ~

このようにコマンド行に出力するのを避けるには最初のパラメタとして"<silent>"を
指定します。 >

	:amenu <silent> Mine.Next\ File :call <SID>NextFile()<CR>

"<silent>"は不必要に使わないでください。これはコマンドの短縮には不要です。他
の人のためにメニューを作るのであれば、どんなコマンドを実行しているのか見れる
ようにしてください。そうすれば、それを使っている人がどんなコマンドを入力すれ
ばマウスを使わなくても良いかのヒントを出すことになります。


メニューの一覧
--------------

{keys}なしで"menu"コマンドを使うと、既に定義済のメニュー一覧を表示します。
また、{menu-item}やその一部を指定して、特定のメニューの一覧を表示することも
できます。例をあげましょう。 >

	:amenu

これは全てのメニューを表示します。とっても長いリストになります。ですから、メ
ニュー名を指定して短いリストにした方が良いでしょう。 >

	:amenu Edit			<---- 英語環境の場合
	:amenu 編集(E)			<----日本語環境の場合

これは全モード用の"Edit"メニュー項目のリストを表示します。例えば挿入モードで
の特定のメニューだけを表示するにはこうします。 >

	:imenu Edit.Undo		<---- 英語環境の場合
	:imenu 編集(E).取り消す(U)	<----日本語環境の場合

メニュー名を指定する時は完全な名前を入力するように気をつけてください。大文字
小文字も区別します。ただし、アクセラレータ指定の'&'だけは省略できます。<Tab>
を押すとその後に続く文字も同じように省略できます。


メニューの削除
--------------

メニューを削除する時も一覧を出す時と似たコマンドを使います。違うのはコマンド
名が"menu"ではなく、"unmenu"になる点です。ですから、":menu"は":unmenu"に、
":nmenu"は":nunmenu"にといった具合です。挿入モード用の"Tools.Make"項目を削除
するのなら、このようにします。 >

	:iunmenu Tools.Make
	:iunmenu ツール(T).メイク(M)	<----日本語環境の場合

メニュー名を指定すると、その中の項目も含めて全てを削除できます。 >

	:aunmenu Syntax
	:aunmenu シンタックス(S)	<----日本語環境の場合

これはシンタックスのメニューとその中の全項目を削除します。

==============================================================================
*42.3*	その他いろいろ

'guioptions'のフラグを使うと、メニューの見た目を変えることができます。デフォ
ルト値では以下のいずれも含んでいます。各オプションは次のような指定ではずすこ
とができます。 >

	:set guioptions-=m
<
	m		これをはずすとメニューバーは表示しなくなります。

	M		これをはずすとデフォルトメニューをロードしなくなりま
			す。

	g		これをはずすと非アクティブなメニュー項目をはグレイに
			ならずに完全に削除されます。(どんなシステムでも動く
			わけではありません)

	t		これをはずすと、ティアオフ機能が使えなくなります。

メニューの一番上にある点線はセパレータではありません。この項目を選択すると、
メニューは"ティアオフ(切り離し)"、つまり別ウィンドウでの表示となります。
これをティアオフメニューと呼びます。同じメニュー項目を頻繁に使う場合に便利で
す。

メニュー項目を他の言語に変更する方法は|:menutrans|をご覧ください。

メニュー項目の選択を行うにはマウスを使う必要がありますから、ファイルの選択に
は":browse"コマンドを使うのは良い方法です。また":confirm"を使うとエラーメッ
セージの表示の代わりにダイアログが出ます。例えば、現在のバッファに変更を加え
ているのであれば、次の２つを組み合せることができます。 >

	:amenu File.Open  :browse confirm edit<CR>

":browse"コマンドは編集するファイルを選択するためにファイルブラウザを表示し
ます。":confirm"は現在のバッファに変更が加わっていれば、ダイアログをポップ
アップし、保存するか、保存しないか、取り止めにするかを選べます。もっと複雑な
項目では、confirm()関数とinputdialog()関数が使えます。デフォルトメニューには
いくつか例となるものがあります。

==============================================================================
*42.4*	ツールバーとポップアップメニュー

メニューには特殊なものが２つあります。ToolBar(ツールバー)とPopUp(ポップアッ
プ)です。このどちらかの名前で始まっている項目は普通のメニューバーには表示さ
れません。


ツールバー
----------

ツールバーは'guioptions'オプションに"T"フラグが含まれている場合のみ表示され
まう。
ツールバーはコマンドを文字列ではなくアイコンを使って示します。例えば、
"ToolBar.New"という{menu-item}はツールバー上に新しいアイコンを作成します。
vimには２８個のアイコンが登録済です。その一覧は|builtin-tools|にあります。
そのほとんどをデフォルトツールバーでは使っています。各アイコンがどんな働きを
するかを(デフォルトのメニューのセットアップ完了後に)再定義できます。
ツールバー用に他のビットマップを追加することもできます。またビットマップ付き
の新しいツールバー項目も定義できます。例えば、新しいツールバー項目の定義は以
下のように行います。 >

	:tmenu ToolBar.Compile  Compile the current file
	:amenu ToolBar.Compile  :!cc % -o %:r<CR>

ここでアイコンを作成する必要があります。MS-WIndowsでは"Compile.bmp"といった
bitmap形式でなければなりません。Unixでは"Compile.xpm"という名前のXPM形式を使
います。ビットマップのサイズは18x18ドットでなくてはなりません。MS-Windowsで
は、他のサイズでも構いませんが、かなり汚なく見えるでしょう。
ビットマップは'runtimepath'の中のどれかにある"bitmaps"ディレクトリにビット
マップを置きましょう。例えば、Unixでは"~/.vim/bitmaps/Compile.xpm"などです。

ツールバーの各項目にはツールチップ(ヒント情報)を定義できます。ツールチップは
そのツールバー項目が実行する内容を説明するための短かいテキストです。例えば
"ファイルを開く"といったものです。これはマウスポインタがその項目の上で暫くの
間動かなかった時に表示されます。

	大文字/小文字に注意してください。"Toolbar"と"toolbar"は、どちらも
	"ToolBar"ではありません。

ツールチップを削除するには|:tunmenu|コマンドを使います。

'toolbar'オプションでは、ビットマップの代わりに文字列を表示したり、文字列と
ビットマップの両方を表示したりを指定できます。多くの人はビットマップだけを
使っています。文字列を使うと多少表示場所を食うからです。


ポップアップメニュー
--------------------

ポップアップメニューはマウスポインタのある場所に表示されるメニューです。
MS-Windowsではマウスの右ボタンクリックで表示できます。その中の項目を選択するの
はマウスの左ボタンです。Unixではマウスの右ボタンを押したままにします。
ポップアップメニューは'mousemodel'が"popup"か"popup_setpos"のどちらかに設定さ
れている場合にだけ表示されます。"popup_setpos"の場合、マウスポインタの場所に
カーソルを動かすという点が両者の違いです。選択範囲の中でクリックした場合は選択
範囲は変更しません。ですが、選択範囲がある時にその範囲外をクリックした場合は選
択を解除します。
各モード毎に別々のポップアップメニューがあります。ですから通常のメニューのよう
に選択できないグレイ状態の項目というのはあり得ません。

What is the meaning of life, the universe and everything?  *42*
Douglas Adams, the only person who knew what this question really was about is
now dead, unfortunately.  So now you might wonder what the meaning of death
is...

訳注: 恐らく今は亡きダグラス・アダムスの著書 "The Hitchhiker's Guide to the
Galaxy" (銀河ヒッチハイク・ガイド)からの引用。なぜこの場所にそれがあるか?。そ
んなの知らないよ orz Bramに聞いてよ orz


==============================================================================

Next chapter: |usr_43.txt|  ファイルタイプを使う

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
